{"version":3,"sources":["/Users/misko/work/angular/dist/packages-dist/core/bundles/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","core","testing","this","_angular_core","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","async","fn","_global","jasmine","done","fail","e","runInTestZone","err","Error","_this","Promise","finishCallback","failCallback","context","currentZone","Zone","current","AsyncTestZoneSpec","undefined","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","scheduleMicroTask","resetFakeAsyncZone","_fakeAsyncTestZoneSpec","resetDelegate","fakeAsync","args","_i","arguments","length","_inFakeAsyncCall","FakeAsyncTestZoneSpec","res","lastProxyZoneSpec","apply","flushMicrotasks","pendingPeriodicTimers","pendingTimers","_getFakeAsyncZoneSpec","tick","millis","flush","maxTurns","discardPeriodicTasks","zoneSpec","unimplemented","getTestBed","_testBed","TestBed","inject","tokens","testBed","indexOf","AsyncTestCompleter","compileComponents","then","completer","execute","promise","withModule","moduleDef","configureTestingModule","InjectSetupWrapper","setPrototypeOf","__proto__","Array","p","hasOwnProperty","window","ComponentFixture","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","hasPendingMacrotasks","onError","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","resolve","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","rej","_reject","value","stackTrace","defineProperty","enumerable","configurable","TestingCompiler","_super","overrideModule","overrides","overrideDirective","directive","overrideComponent","component","overridePipe","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","Compiler","TestingCompilerFactory","UNDEFINED","TestComponentRenderer","insertRootElement","rootElementId","_nextRootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","_instantiated","_compiler","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_aotSummaries","platform","ngModule","initTestEnvironment","aotSummaries","resetTestEnvironment","resetTestingModule","configureCompiler","config","override","pipe","overrideTemplate","template","set","templateUrl","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","ɵclearProviderOverrides","forEach","fixture","console","_assertNotInstantiated","push","providers","_a","declarations","_b","imports","_c","schemas","_d","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","moduleAndComponentFactories","ngModuleFactory","_initIfNeeded","compileModuleAndAllComponentsSync","errorCompType","ɵstringify","NgZone","enableLongStackTrace","ngZoneInjector","provide","useValue","ApplicationInitStatus","runInitializers","concat","DynamicTestModule","decorators","type","NgModule","ctorParameters","compilerFactory","createTestingCompiler","entry","methodName","methodDescription","result","params","map","t","overrideProviderImpl","deprecated","flags","useFactory","deps","dep","depToken","depFlags","isArray","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","componentFactory","noNgZone","testComponentRenderer","rootElId","initComponent","NULL","_moduleDef","_addModule","self","call","_global$1","beforeEach","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory"],"mappings":"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","file":"/Users/misko/work/angular/dist/packages-dist/core/bundles/core-testing.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.2\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}),global.ng.core));\n}(this, (function (exports,_angular_core) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * @license Angular v5.0.2\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global = (typeof window === 'undefined' ? global : window);\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @stable\n */\nfunction async(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n            if (!done) {\n                // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                // fake it here and assume sync.\n                done = function () { };\n                done.fail = function (e) { throw e; };\n            }\n            runInTestZone(fn, this, done, function (err) {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(err));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var _this = this;\n        return new Promise(function (finishCallback, failCallback) {\n            runInTestZone(fn, _this, finishCallback, failCallback);\n        });\n    };\n}\nfunction runInTestZone(fn, context, finishCallback, failCallback) {\n    var currentZone = Zone.current;\n    var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (ProxyZoneSpec === undefined) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/proxy.js');\n    }\n    var proxyZoneSpec = ProxyZoneSpec.get();\n    ProxyZoneSpec.assertPresent();\n    // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n    // If we do it in ProxyZone then we will get to infinite recursion.\n    var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n    var previousDelegate = proxyZoneSpec.getDelegate();\n    proxyZone.parent.run(function () {\n        var testZoneSpec = new AsyncTestZoneSpec(function () {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                finishCallback();\n            });\n        }, function (error) {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                failCallback(error);\n            });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n    });\n    return Zone.current.runGuarded(fn, context);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fixture for debugging and testing a component.\n *\n * @stable\n */\nvar ComponentFixture = (function () {\n    function ComponentFixture(componentRef, ngZone, _autoDetect) {\n        var _this = this;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = _angular_core.getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(function () {\n                _this._onUnstableSubscription =\n                    ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: function () {\n                        if (_this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            _this.detectChanges(true);\n                        }\n                    }\n                });\n                _this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: function () {\n                        _this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (_this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(function () {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (_this._promise !== null) {\n                                        _this._resolve(true);\n                                        _this._resolve = null;\n                                        _this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                _this._onErrorSubscription =\n                    ngZone.onError.subscribe({ next: function (error) { throw error; } });\n            });\n        }\n    }\n    ComponentFixture.prototype._tick = function (checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    };\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    /**\n       * Trigger a change detection cycle for the component.\n       */\n    ComponentFixture.prototype.detectChanges = /**\n       * Trigger a change detection cycle for the component.\n       */\n    function (checkNoChanges) {\n        var _this = this;\n        if (checkNoChanges === void 0) { checkNoChanges = true; }\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(function () { _this._tick(checkNoChanges); });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    };\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    /**\n       * Do a change detection run to make sure there were no changes.\n       */\n    ComponentFixture.prototype.checkNoChanges = /**\n       * Do a change detection run to make sure there were no changes.\n       */\n    function () { this.changeDetectorRef.checkNoChanges(); };\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    /**\n       * Set whether the fixture should autodetect changes.\n       *\n       * Also runs detectChanges once so that any existing change is detected.\n       */\n    ComponentFixture.prototype.autoDetectChanges = /**\n       * Set whether the fixture should autodetect changes.\n       *\n       * Also runs detectChanges once so that any existing change is detected.\n       */\n    function (autoDetect) {\n        if (autoDetect === void 0) { autoDetect = true; }\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    };\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    /**\n       * Return whether the fixture is currently stable or has async tasks that have not been completed\n       * yet.\n       */\n    ComponentFixture.prototype.isStable = /**\n       * Return whether the fixture is currently stable or has async tasks that have not been completed\n       * yet.\n       */\n    function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    /**\n       * Get a promise that resolves when the fixture is stable.\n       *\n       * This can be used to resume testing after events have triggered asynchronous activity or\n       * asynchronous change detection.\n       */\n    ComponentFixture.prototype.whenStable = /**\n       * Get a promise that resolves when the fixture is stable.\n       *\n       * This can be used to resume testing after events have triggered asynchronous activity or\n       * asynchronous change detection.\n       */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(function (res) { _this._resolve = res; });\n            return this._promise;\n        }\n    };\n    ComponentFixture.prototype._getRenderer = function () {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(_angular_core.RendererFactory2, null);\n        }\n        return this._renderer;\n    };\n    /**\n      * Get a promise that resolves when the ui state is stable following animations.\n      */\n    /**\n        * Get a promise that resolves when the ui state is stable following animations.\n        */\n    ComponentFixture.prototype.whenRenderingDone = /**\n        * Get a promise that resolves when the ui state is stable following animations.\n        */\n    function () {\n        var renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    };\n    /**\n     * Trigger component destruction.\n     */\n    /**\n       * Trigger component destruction.\n       */\n    ComponentFixture.prototype.destroy = /**\n       * Trigger component destruction.\n       */\n    function () {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    };\n    return ComponentFixture;\n}());\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FakeAsyncTestZoneSpec = Zone['FakeAsyncTestZoneSpec'];\nvar ProxyZoneSpec = Zone['ProxyZoneSpec'];\nvar _fakeAsyncTestZoneSpec = null;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nfunction resetFakeAsyncZone() {\n    _fakeAsyncTestZoneSpec = null;\n    ProxyZoneSpec.assertPresent().resetDelegate();\n}\nvar _inFakeAsyncCall = false;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nfunction fakeAsync(fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n        if (_inFakeAsyncCall) {\n            throw new Error('fakeAsync() calls can not be nested');\n        }\n        _inFakeAsyncCall = true;\n        try {\n            if (!_fakeAsyncTestZoneSpec) {\n                if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                    throw new Error('fakeAsync() calls can not be nested');\n                }\n                _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n            }\n            var res = void 0;\n            var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n            proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n            try {\n                res = fn.apply(this, args);\n                flushMicrotasks();\n            }\n            finally {\n                proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                    \"periodic timer(s) still in the queue.\");\n            }\n            if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n            }\n            return res;\n        }\n        finally {\n            _inFakeAsyncCall = false;\n            resetFakeAsyncZone();\n        }\n    };\n}\nfunction _getFakeAsyncZoneSpec() {\n    if (_fakeAsyncTestZoneSpec == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n    }\n    return _fakeAsyncTestZoneSpec;\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nfunction tick(millis) {\n    if (millis === void 0) { millis = 0; }\n    _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nfunction flush(maxTurns) {\n    return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nfunction discardPeriodicTasks() {\n    var zoneSpec = _getFakeAsyncZoneSpec();\n    var pendingTimers = zoneSpec.pendingPeriodicTimers;\n    zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nfunction flushMicrotasks() {\n    _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nvar AsyncTestCompleter = (function () {\n    function AsyncTestCompleter() {\n        var _this = this;\n        this._promise = new Promise(function (res, rej) {\n            _this._resolve = res;\n            _this._reject = rej;\n        });\n    }\n    AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n    AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n    Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n        get: function () { return this._promise; },\n        enumerable: true,\n        configurable: true\n    });\n    return AsyncTestCompleter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nvar TestingCompiler = (function (_super) {\n    __extends(TestingCompiler, _super);\n    function TestingCompiler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n        get: function () { throw unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    TestingCompiler.prototype.overrideModule = function (module, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n        throw unimplemented();\n    };\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    /**\n       * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n       * so that it can use the code generated by AOT.\n       */\n    TestingCompiler.prototype.loadAotSummaries = /**\n       * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n       * so that it can use the code generated by AOT.\n       */\n    function (summaries) { throw unimplemented(); };\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    /**\n       * Gets the component factory for the given component.\n       * This assumes that the component has been compiled before calling this call using\n       * `compileModuleAndAllComponents*`.\n       */\n    TestingCompiler.prototype.getComponentFactory = /**\n       * Gets the component factory for the given component.\n       * This assumes that the component has been compiled before calling this call using\n       * `compileModuleAndAllComponents*`.\n       */\n    function (component) { throw unimplemented(); };\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    /**\n       * Returns the component type that is stored in the given error.\n       * This can be used for errors created by compileModule...\n       */\n    TestingCompiler.prototype.getComponentFromError = /**\n       * Returns the component type that is stored in the given error.\n       * This can be used for errors created by compileModule...\n       */\n    function (error) { throw unimplemented(); };\n    return TestingCompiler;\n}(_angular_core.Compiler));\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nvar TestingCompilerFactory = (function () {\n    function TestingCompilerFactory() {\n    }\n    return TestingCompilerFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar UNDEFINED = new Object();\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nvar TestComponentRenderer = (function () {\n    function TestComponentRenderer() {\n    }\n    TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n    return TestComponentRenderer;\n}());\nvar _nextRootElementId = 0;\n/**\n * @experimental\n */\nvar ComponentFixtureAutoDetect = new _angular_core.InjectionToken('ComponentFixtureAutoDetect');\n/**\n * @experimental\n */\nvar ComponentFixtureNoNgZone = new _angular_core.InjectionToken('ComponentFixtureNoNgZone');\n/**\n * @whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * @description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @stable\n */\nvar TestBed = (function () {\n    function TestBed() {\n        this._instantiated = false;\n        this._compiler = null;\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._aotSummaries = function () { return []; };\n        this.platform = null;\n        this.ngModule = null;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    TestBed.initTestEnvironment = /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    function (ngModule, platform, aotSummaries) {\n        var testBed = getTestBed();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    TestBed.resetTestEnvironment = /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    function () { getTestBed().resetTestEnvironment(); };\n    TestBed.resetTestingModule = function () {\n        getTestBed().resetTestingModule();\n        return TestBed;\n    };\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    /**\n       * Allows overriding default compiler providers and settings\n       * which are defined in test_injector.js\n       */\n    TestBed.configureCompiler = /**\n       * Allows overriding default compiler providers and settings\n       * which are defined in test_injector.js\n       */\n    function (config) {\n        getTestBed().configureCompiler(config);\n        return TestBed;\n    };\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    /**\n       * Allows overriding default providers, directives, pipes, modules of the test injector,\n       * which are defined in test_injector.js\n       */\n    TestBed.configureTestingModule = /**\n       * Allows overriding default providers, directives, pipes, modules of the test injector,\n       * which are defined in test_injector.js\n       */\n    function (moduleDef) {\n        getTestBed().configureTestingModule(moduleDef);\n        return TestBed;\n    };\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    /**\n       * Compile components with a `templateUrl` for the test's NgModule.\n       * It is necessary to call this function\n       * as fetching urls is asynchronous.\n       */\n    TestBed.compileComponents = /**\n       * Compile components with a `templateUrl` for the test's NgModule.\n       * It is necessary to call this function\n       * as fetching urls is asynchronous.\n       */\n    function () { return getTestBed().compileComponents(); };\n    TestBed.overrideModule = function (ngModule, override) {\n        getTestBed().overrideModule(ngModule, override);\n        return TestBed;\n    };\n    TestBed.overrideComponent = function (component, override) {\n        getTestBed().overrideComponent(component, override);\n        return TestBed;\n    };\n    TestBed.overrideDirective = function (directive, override) {\n        getTestBed().overrideDirective(directive, override);\n        return TestBed;\n    };\n    TestBed.overridePipe = function (pipe, override) {\n        getTestBed().overridePipe(pipe, override);\n        return TestBed;\n    };\n    TestBed.overrideTemplate = function (component, template) {\n        getTestBed().overrideComponent(component, { set: { template: template, templateUrl: (null) } });\n        return TestBed;\n    };\n    TestBed.overrideProvider = function (token, provider) {\n        getTestBed().overrideProvider(token, provider);\n        return TestBed;\n    };\n    TestBed.deprecatedOverrideProvider = function (token, provider) {\n        getTestBed().deprecatedOverrideProvider(token, provider);\n        return TestBed;\n    };\n    TestBed.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _angular_core.Injector.THROW_IF_NOT_FOUND; }\n        return getTestBed().get(token, notFoundValue);\n    };\n    TestBed.createComponent = function (component) {\n        return getTestBed().createComponent(component);\n    };\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    TestBed.prototype.initTestEnvironment = /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    function (ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._aotSummaries = aotSummaries;\n        }\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    TestBed.prototype.resetTestEnvironment = /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    function () {\n        this.resetTestingModule();\n        this.platform = (null);\n        this.ngModule = (null);\n        this._aotSummaries = function () { return []; };\n    };\n    TestBed.prototype.resetTestingModule = function () {\n        _angular_core.ɵclearProviderOverrides();\n        this._compiler = (null);\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._moduleRef = (null);\n        this._moduleFactory = (null);\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach(function (fixture) {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', fixture.componentInstance);\n            }\n        });\n        this._activeFixtures = [];\n    };\n    TestBed.prototype.configureCompiler = function (config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    };\n    TestBed.prototype.configureTestingModule = function (moduleDef) {\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            (_a = this._providers).push.apply(_a, moduleDef.providers);\n        }\n        if (moduleDef.declarations) {\n            (_b = this._declarations).push.apply(_b, moduleDef.declarations);\n        }\n        if (moduleDef.imports) {\n            (_c = this._imports).push.apply(_c, moduleDef.imports);\n        }\n        if (moduleDef.schemas) {\n            (_d = this._schemas).push.apply(_d, moduleDef.schemas);\n        }\n        var _a, _b, _c, _d;\n    };\n    TestBed.prototype.compileComponents = function () {\n        var _this = this;\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        var moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then(function (moduleAndComponentFactories) {\n            _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    };\n    TestBed.prototype._initIfNeeded = function () {\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                var moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (e) {\n                var errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(\"This test module uses the component \" + _angular_core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                        \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        var ngZone = new _angular_core.NgZone({ enableLongStackTrace: true });\n        var ngZoneInjector = _angular_core.Injector.create([{ provide: _angular_core.NgZone, useValue: ngZone }], this.platform.injector);\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        this._moduleRef.injector.get(_angular_core.ApplicationInitStatus).runInitializers();\n        this._instantiated = true;\n    };\n    TestBed.prototype._createCompilerAndModule = function () {\n        var _this = this;\n        var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        var declarations = this._declarations;\n        var imports = [this.ngModule, this._imports];\n        var schemas = this._schemas;\n        var DynamicTestModule = (function () {\n            function DynamicTestModule() {\n            }\n            DynamicTestModule.decorators = [\n                { type: _angular_core.NgModule, args: [{ providers: providers, declarations: declarations, imports: imports, schemas: schemas },] },\n            ];\n            /** @nocollapse */\n            DynamicTestModule.ctorParameters = function () { return []; };\n            return DynamicTestModule;\n        }());\n        var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        this._compiler.loadAotSummaries(this._aotSummaries);\n        this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n        this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n        this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n        this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n        return DynamicTestModule;\n    };\n    TestBed.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n        }\n    };\n    TestBed.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _angular_core.Injector.THROW_IF_NOT_FOUND; }\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        // Tests can inject things from the ng module and from the compiler,\n        // but the ng module can't inject things from the compiler and vice versa.\n        var result = this._moduleRef.injector.get(token, UNDEFINED);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n    };\n    TestBed.prototype.execute = function (tokens, fn, context) {\n        var _this = this;\n        this._initIfNeeded();\n        var params = tokens.map(function (t) { return _this.get(t); });\n        return fn.apply(context, params);\n    };\n    TestBed.prototype.overrideModule = function (ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    };\n    TestBed.prototype.overrideComponent = function (component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    };\n    TestBed.prototype.overrideDirective = function (directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    };\n    TestBed.prototype.overridePipe = function (pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    };\n    TestBed.prototype.overrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider);\n    };\n    TestBed.prototype.deprecatedOverrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider, /* deprecated */ /* deprecated */ true);\n    };\n    TestBed.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n        if (deprecated === void 0) { deprecated = false; }\n        var flags = 0;\n        var value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        var deps = (provider.deps || []).map(function (dep) {\n            var depFlags = 0;\n            var depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach(function (entry) {\n                    if (entry instanceof _angular_core.Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof _angular_core.SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        _angular_core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n    };\n    TestBed.prototype.createComponent = function (component) {\n        var _this = this;\n        this._initIfNeeded();\n        var componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(\"Cannot create the component \" + _angular_core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n        }\n        var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n        var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n        var ngZone = noNgZone ? null : this.get(_angular_core.NgZone, null);\n        var testComponentRenderer = this.get(TestComponentRenderer);\n        var rootElId = \"root\" + _nextRootElementId++;\n        testComponentRenderer.insertRootElement(rootElId);\n        var initComponent = function () {\n            var componentRef = componentFactory.create(_angular_core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    };\n    return TestBed;\n}());\nvar _testBed = (null);\n/**\n * @experimental\n */\nfunction getTestBed() {\n    return _testBed = _testBed || new TestBed();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nfunction inject(tokens, fn) {\n    var testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(function () {\n                var completer = testBed.get(AsyncTestCompleter);\n                testBed.execute(tokens, fn, _this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () { return testBed.execute(tokens, fn, this); };\n    }\n}\n/**\n * @experimental\n */\nvar InjectSetupWrapper = (function () {\n    function InjectSetupWrapper(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    InjectSetupWrapper.prototype._addModule = function () {\n        var moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    };\n    InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n        var self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    };\n    return InjectSetupWrapper;\n}());\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(function () { return moduleDef; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Public Test Library for unit testing Angular applications. Assumes that you are running\n * with Jasmine, Mocha, or a similar framework which exports a beforeEach function and\n * allows tests to be asynchronous by either returning a promise or using a 'done' parameter.\n */\nvar _global$1 = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global$1.beforeEach) {\n    _global$1.beforeEach(function () {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nvar __core_private_testing_placeholder__ = '';\n\nexports.async = async;\nexports.ComponentFixture = ComponentFixture;\nexports.resetFakeAsyncZone = resetFakeAsyncZone;\nexports.fakeAsync = fakeAsync;\nexports.tick = tick;\nexports.flush = flush;\nexports.discardPeriodicTasks = discardPeriodicTasks;\nexports.flushMicrotasks = flushMicrotasks;\nexports.TestComponentRenderer = TestComponentRenderer;\nexports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\nexports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\nexports.TestBed = TestBed;\nexports.getTestBed = getTestBed;\nexports.inject = inject;\nexports.InjectSetupWrapper = InjectSetupWrapper;\nexports.withModule = withModule;\nexports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\nexports.ɵTestingCompiler = TestingCompiler;\nexports.ɵTestingCompilerFactory = TestingCompilerFactory;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}