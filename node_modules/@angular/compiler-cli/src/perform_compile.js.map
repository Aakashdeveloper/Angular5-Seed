{"version":3,"file":"perform_compile.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform_compile.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isSyntaxError, syntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as api from './transformers/api';\nimport * as ng from './transformers/entry_points';\nimport {createMessageDiagnostic} from './transformers/util';\n\nconst TS_EXT = /\\.ts$/;\n\nexport type Diagnostics = Array<ts.Diagnostic|api.Diagnostic>;\n\nexport function filterErrorsAndWarnings(diagnostics: Diagnostics): Diagnostics {\n  return diagnostics.filter(d => d.category !== ts.DiagnosticCategory.Message);\n}\n\nconst defaultFormatHost: ts.FormatDiagnosticsHost = {\n  getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n  getCanonicalFileName: fileName => fileName,\n  getNewLine: () => ts.sys.newLine\n};\n\nexport function formatDiagnostics(\n    diags: Diagnostics, tsFormatHost: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  if (diags && diags.length) {\n    return diags\n        .map(d => {\n          if (api.isTsDiagnostic(d)) {\n            return ts.formatDiagnostics([d], tsFormatHost);\n          } else {\n            let res = ts.DiagnosticCategory[d.category];\n            if (d.span) {\n              res +=\n                  ` at ${d.span.start.file.url}(${d.span.start.line + 1},${d.span.start.col + 1})`;\n            }\n            if (d.span && d.span.details) {\n              res += `: ${d.span.details}, ${d.messageText}\\n`;\n            } else {\n              res += `: ${d.messageText}\\n`;\n            }\n            return res;\n          }\n        })\n        .join('');\n  } else\n    return '';\n}\n\nexport interface ParsedConfiguration {\n  project: string;\n  options: api.CompilerOptions;\n  rootNames: string[];\n  emitFlags: api.EmitFlags;\n  errors: Diagnostics;\n}\n\nexport function calcProjectFileAndBasePath(project: string):\n    {projectFile: string, basePath: string} {\n  const projectIsDir = fs.lstatSync(project).isDirectory();\n  const projectFile = projectIsDir ? path.join(project, 'tsconfig.json') : project;\n  const projectDir = projectIsDir ? project : path.dirname(project);\n  const basePath = path.resolve(process.cwd(), projectDir);\n  return {projectFile, basePath};\n}\n\nexport function createNgCompilerOptions(\n    basePath: string, config: any, tsOptions: ts.CompilerOptions): api.CompilerOptions {\n  return {...tsOptions, ...config.angularCompilerOptions, genDir: basePath, basePath};\n}\n\nexport function readConfiguration(\n    project: string, existingOptions?: ts.CompilerOptions): ParsedConfiguration {\n  try {\n    const {projectFile, basePath} = calcProjectFileAndBasePath(project);\n\n    let {config, error} = ts.readConfigFile(projectFile, ts.sys.readFile);\n\n    if (error) {\n      return {\n        project,\n        errors: [error],\n        rootNames: [],\n        options: {},\n        emitFlags: api.EmitFlags.Default\n      };\n    }\n    const parseConfigHost = {\n      useCaseSensitiveFileNames: true,\n      fileExists: fs.existsSync,\n      readDirectory: ts.sys.readDirectory,\n      readFile: ts.sys.readFile\n    };\n    const parsed =\n        ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);\n    const rootNames = parsed.fileNames.map(f => path.normalize(f));\n\n    const options = createNgCompilerOptions(basePath, config, parsed.options);\n    let emitFlags = api.EmitFlags.Default;\n    if (!(options.skipMetadataEmit || options.flatModuleOutFile)) {\n      emitFlags |= api.EmitFlags.Metadata;\n    }\n    if (options.skipTemplateCodegen) {\n      emitFlags = emitFlags & ~api.EmitFlags.Codegen;\n    }\n    return {project: projectFile, rootNames, options, errors: parsed.errors, emitFlags};\n  } catch (e) {\n    const errors: Diagnostics = [{\n      category: ts.DiagnosticCategory.Error,\n      messageText: e.stack,\n      source: api.SOURCE,\n      code: api.UNKNOWN_ERROR_CODE\n    }];\n    return {project: '', errors, rootNames: [], options: {}, emitFlags: api.EmitFlags.Default};\n  }\n}\n\nexport interface PerformCompilationResult {\n  diagnostics: Diagnostics;\n  program?: api.Program;\n  emitResult?: ts.EmitResult;\n}\n\nexport function exitCodeFromResult(diags: Diagnostics | undefined): number {\n  if (!diags || filterErrorsAndWarnings(diags).length === 0) {\n    // If we have a result and didn't get any errors, we succeeded.\n    return 0;\n  }\n\n  // Return 2 if any of the errors were unknown.\n  return diags.some(d => d.source === 'angular' && d.code === api.UNKNOWN_ERROR_CODE) ? 2 : 1;\n}\n\nexport function performCompilation({rootNames, options, host, oldProgram, emitCallback,\n                                    gatherDiagnostics = defaultGatherDiagnostics,\n                                    customTransformers, emitFlags = api.EmitFlags.Default}: {\n  rootNames: string[],\n  options: api.CompilerOptions,\n  host?: api.CompilerHost,\n  oldProgram?: api.Program,\n  emitCallback?: api.TsEmitCallback,\n  gatherDiagnostics?: (program: api.Program) => Diagnostics,\n  customTransformers?: api.CustomTransformers,\n  emitFlags?: api.EmitFlags\n}): PerformCompilationResult {\n  let program: api.Program|undefined;\n  let emitResult: ts.EmitResult|undefined;\n  let allDiagnostics: Diagnostics = [];\n  try {\n    if (!host) {\n      host = ng.createCompilerHost({options});\n    }\n\n    program = ng.createProgram({rootNames, host, options, oldProgram});\n\n    const beforeDiags = Date.now();\n    allDiagnostics.push(...gatherDiagnostics(program !));\n    if (options.diagnostics) {\n      const afterDiags = Date.now();\n      allDiagnostics.push(\n          createMessageDiagnostic(`Time for diagnostics: ${afterDiags - beforeDiags}ms.`));\n    }\n\n    if (!hasErrors(allDiagnostics)) {\n      emitResult = program !.emit({emitCallback, customTransformers, emitFlags});\n      allDiagnostics.push(...emitResult.diagnostics);\n      return {diagnostics: allDiagnostics, program, emitResult};\n    }\n    return {diagnostics: allDiagnostics, program};\n  } catch (e) {\n    let errMsg: string;\n    let code: number;\n    if (isSyntaxError(e)) {\n      // don't report the stack for syntax errors as they are well known errors.\n      errMsg = e.message;\n      code = api.DEFAULT_ERROR_CODE;\n    } else {\n      errMsg = e.stack;\n      // It is not a syntax error we might have a program with unknown state, discard it.\n      program = undefined;\n      code = api.UNKNOWN_ERROR_CODE;\n    }\n    allDiagnostics.push(\n        {category: ts.DiagnosticCategory.Error, messageText: errMsg, code, source: api.SOURCE});\n    return {diagnostics: allDiagnostics, program};\n  }\n}\nfunction defaultGatherDiagnostics(program: api.Program): Diagnostics {\n  const allDiagnostics: Diagnostics = [];\n\n  function checkDiagnostics(diags: Diagnostics | undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return !hasErrors(diags);\n    }\n    return true;\n  }\n\n  let checkOtherDiagnostics = true;\n  // Check parameter diagnostics\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n      checkDiagnostics([...program.getTsOptionDiagnostics(), ...program.getNgOptionDiagnostics()]);\n\n  // Check syntactic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getTsSyntacticDiagnostics());\n\n  // Check TypeScript semantic and Angular structure diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics &&\n      checkDiagnostics(\n          [...program.getTsSemanticDiagnostics(), ...program.getNgStructuralDiagnostics()]);\n\n  // Check Angular semantic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getNgSemanticDiagnostics());\n\n  return allDiagnostics;\n}\n\nfunction hasErrors(diags: Diagnostics) {\n  return diags.some(d => d.category === ts.DiagnosticCategory.Error);\n}\n"]}