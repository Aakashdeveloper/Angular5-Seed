"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const webpack_sources_1 = require("webpack-sources");
// This matches a comment left by the build-optimizer that contains pure import paths
const importCommentRegex = /\/\*\* PURE_IMPORTS_START (\S+) PURE_IMPORTS_END \*\//mg;
function purifyReplacements(content) {
    const pureImportMatches = getMatches(content, importCommentRegex, 1).join('|');
    if (!pureImportMatches) {
        return [];
    }
    const replacements = [];
    const addReplacement = (start, length, content) => replacements.push({
        start,
        end: start + length - 1,
        content,
    });
    /* Prefix safe imports with pure */
    content.replace(new RegExp(`(_(${pureImportMatches})__ = )(__webpack_require__\\(\\S+\\);)`, 'mg'), (match, p1, _p2, p3, offset) => {
        const newContent = `${p1}/*@__PURE__*/${p3}`;
        addReplacement(offset, match.length, newContent);
        return newContent;
    });
    /* Prefix default safe imports with pure */
    content.replace(new RegExp(`(_(${pureImportMatches})___default = )(__webpack_require__\\.\\w\\(\\S+\\);)`, 'mg'), (match, p1, _p2, p3, offset) => {
        const newContent = `${p1}/*@__PURE__*/${p3}`;
        addReplacement(offset, match.length, newContent);
        return newContent;
    });
    return replacements;
}
exports.purifyReplacements = purifyReplacements;
function purify(content) {
    const rawSource = new webpack_sources_1.RawSource(content);
    const replaceSource = new webpack_sources_1.ReplaceSource(rawSource, 'file.js');
    const replacements = purifyReplacements(content);
    replacements.forEach((replacement) => {
        replaceSource.replace(replacement.start, replacement.end, replacement.content);
    });
    return replaceSource.source();
}
exports.purify = purify;
function getMatches(str, regex, index) {
    let matches = [];
    let match;
    // tslint:disable-next-line:no-conditional-assignment
    while (match = regex.exec(str)) {
        matches = matches.concat(match[index].split(','));
    }
    return matches;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyaWZ5LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW5zbC9Tb3VyY2VzL2hhbnNsL2RldmtpdC8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX29wdGltaXplci9zcmMvcHVyaWZ5L3B1cmlmeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILHFEQUEyRDtBQUczRCxxRkFBcUY7QUFDckYsTUFBTSxrQkFBa0IsR0FBRyx5REFBeUQsQ0FBQztBQVNyRiw0QkFBbUMsT0FBZTtJQUVoRCxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9FLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQWtCLEVBQUUsQ0FBQztJQUN2QyxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQWEsRUFBRSxNQUFjLEVBQUUsT0FBZSxLQUNwRSxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2hCLEtBQUs7UUFDTCxHQUFHLEVBQUUsS0FBSyxHQUFHLE1BQU0sR0FBRyxDQUFDO1FBQ3ZCLE9BQU87S0FDUixDQUFDLENBQUM7SUFFTCxtQ0FBbUM7SUFDbkMsT0FBTyxDQUFDLE9BQU8sQ0FDYixJQUFJLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQix5Q0FBeUMsRUFBRSxJQUFJLENBQUMsRUFDbEYsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTTtRQUN6QixNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1FBQzdDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVqRCxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FDRixDQUFDO0lBRUYsMkNBQTJDO0lBQzNDLE9BQU8sQ0FBQyxPQUFPLENBQ2IsSUFBSSxNQUFNLENBQ1IsTUFBTSxpQkFBaUIsdURBQXVELEVBQUUsSUFBSSxDQUNyRixFQUNELENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU07UUFDekIsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsQ0FBQztRQUM3QyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFakQsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQ0YsQ0FBQztJQUVGLE1BQU0sQ0FBQyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQXhDRCxnREF3Q0M7QUFFRCxnQkFBdUIsT0FBZTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLDJCQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsTUFBTSxhQUFhLEdBQUcsSUFBSSwrQkFBYSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU5RCxNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRCxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVztRQUMvQixhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakYsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2hDLENBQUM7QUFWRCx3QkFVQztBQUVELG9CQUFvQixHQUFXLEVBQUUsS0FBYSxFQUFFLEtBQWE7SUFDM0QsSUFBSSxPQUFPLEdBQWEsRUFBRSxDQUFDO0lBQzNCLElBQUksS0FBSyxDQUFDO0lBQ1YscURBQXFEO0lBQ3JELE9BQU8sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IFJhd1NvdXJjZSwgUmVwbGFjZVNvdXJjZSB9IGZyb20gJ3dlYnBhY2stc291cmNlcyc7XG5cblxuLy8gVGhpcyBtYXRjaGVzIGEgY29tbWVudCBsZWZ0IGJ5IHRoZSBidWlsZC1vcHRpbWl6ZXIgdGhhdCBjb250YWlucyBwdXJlIGltcG9ydCBwYXRoc1xuY29uc3QgaW1wb3J0Q29tbWVudFJlZ2V4ID0gL1xcL1xcKlxcKiBQVVJFX0lNUE9SVFNfU1RBUlQgKFxcUyspIFBVUkVfSU1QT1JUU19FTkQgXFwqXFwvL21nO1xuXG4vLyBSZXBsYWNlbWVudHMgYXJlIG1lYW50IHRvIGJlIHVzZWQgd2l0aCBXZWJwYWNrJ3MgUmVwbGFjZVNvdXJjZS5cbmV4cG9ydCBpbnRlcmZhY2UgUmVwbGFjZW1lbnQge1xuICBzdGFydDogbnVtYmVyO1xuICBlbmQ6IG51bWJlcjtcbiAgY29udGVudDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVyaWZ5UmVwbGFjZW1lbnRzKGNvbnRlbnQ6IHN0cmluZykge1xuXG4gIGNvbnN0IHB1cmVJbXBvcnRNYXRjaGVzID0gZ2V0TWF0Y2hlcyhjb250ZW50LCBpbXBvcnRDb21tZW50UmVnZXgsIDEpLmpvaW4oJ3wnKTtcbiAgaWYgKCFwdXJlSW1wb3J0TWF0Y2hlcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHJlcGxhY2VtZW50czogUmVwbGFjZW1lbnRbXSA9IFtdO1xuICBjb25zdCBhZGRSZXBsYWNlbWVudCA9IChzdGFydDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgY29udGVudDogc3RyaW5nKSA9PlxuICAgIHJlcGxhY2VtZW50cy5wdXNoKHtcbiAgICAgIHN0YXJ0LFxuICAgICAgZW5kOiBzdGFydCArIGxlbmd0aCAtIDEsXG4gICAgICBjb250ZW50LFxuICAgIH0pO1xuXG4gIC8qIFByZWZpeCBzYWZlIGltcG9ydHMgd2l0aCBwdXJlICovXG4gIGNvbnRlbnQucmVwbGFjZShcbiAgICBuZXcgUmVnRXhwKGAoXygke3B1cmVJbXBvcnRNYXRjaGVzfSlfXyA9ICkoX193ZWJwYWNrX3JlcXVpcmVfX1xcXFwoXFxcXFMrXFxcXCk7KWAsICdtZycpLFxuICAgIChtYXRjaCwgcDEsIF9wMiwgcDMsIG9mZnNldCkgPT4ge1xuICAgICAgY29uc3QgbmV3Q29udGVudCA9IGAke3AxfS8qQF9fUFVSRV9fKi8ke3AzfWA7XG4gICAgICBhZGRSZXBsYWNlbWVudChvZmZzZXQsIG1hdGNoLmxlbmd0aCwgbmV3Q29udGVudCk7XG5cbiAgICAgIHJldHVybiBuZXdDb250ZW50O1xuICAgIH0sXG4gICk7XG5cbiAgLyogUHJlZml4IGRlZmF1bHQgc2FmZSBpbXBvcnRzIHdpdGggcHVyZSAqL1xuICBjb250ZW50LnJlcGxhY2UoXG4gICAgbmV3IFJlZ0V4cChcbiAgICAgIGAoXygke3B1cmVJbXBvcnRNYXRjaGVzfSlfX19kZWZhdWx0ID0gKShfX3dlYnBhY2tfcmVxdWlyZV9fXFxcXC5cXFxcd1xcXFwoXFxcXFMrXFxcXCk7KWAsICdtZycsXG4gICAgKSxcbiAgICAobWF0Y2gsIHAxLCBfcDIsIHAzLCBvZmZzZXQpID0+IHtcbiAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSBgJHtwMX0vKkBfX1BVUkVfXyovJHtwM31gO1xuICAgICAgYWRkUmVwbGFjZW1lbnQob2Zmc2V0LCBtYXRjaC5sZW5ndGgsIG5ld0NvbnRlbnQpO1xuXG4gICAgICByZXR1cm4gbmV3Q29udGVudDtcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiByZXBsYWNlbWVudHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXJpZnkoY29udGVudDogc3RyaW5nKSB7XG4gIGNvbnN0IHJhd1NvdXJjZSA9IG5ldyBSYXdTb3VyY2UoY29udGVudCk7XG4gIGNvbnN0IHJlcGxhY2VTb3VyY2UgPSBuZXcgUmVwbGFjZVNvdXJjZShyYXdTb3VyY2UsICdmaWxlLmpzJyk7XG5cbiAgY29uc3QgcmVwbGFjZW1lbnRzID0gcHVyaWZ5UmVwbGFjZW1lbnRzKGNvbnRlbnQpO1xuICByZXBsYWNlbWVudHMuZm9yRWFjaCgocmVwbGFjZW1lbnQpID0+IHtcbiAgICByZXBsYWNlU291cmNlLnJlcGxhY2UocmVwbGFjZW1lbnQuc3RhcnQsIHJlcGxhY2VtZW50LmVuZCwgcmVwbGFjZW1lbnQuY29udGVudCk7XG4gIH0pO1xuXG4gIHJldHVybiByZXBsYWNlU291cmNlLnNvdXJjZSgpO1xufVxuXG5mdW5jdGlvbiBnZXRNYXRjaGVzKHN0cjogc3RyaW5nLCByZWdleDogUmVnRXhwLCBpbmRleDogbnVtYmVyKSB7XG4gIGxldCBtYXRjaGVzOiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgbWF0Y2g7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25kaXRpb25hbC1hc3NpZ25tZW50XG4gIHdoaWxlIChtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyKSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaGVzLmNvbmNhdChtYXRjaFtpbmRleF0uc3BsaXQoJywnKSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbiJdfQ==